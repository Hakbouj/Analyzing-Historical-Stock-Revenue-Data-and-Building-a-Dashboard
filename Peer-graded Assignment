#!pip install yfinance==0.2.38
#!pip install pandas==2.2.2
#!pip install nbformat

!pip install yfinance
!pip install bs4
!pip install nbformat

import yfinance as yf
import pandas as pd
import requests
from bs4 import BeautifulSoup
import plotly.graph_objects as go
from plotly.subplots import make_subplots

import warnings
# Ignore all warnings
warnings.filterwarnings("ignore", category=FutureWarning)

def make_graph(stock_data, revenue_data, stock):
    fig = make_subplots(rows=2, cols=1, shared_xaxes=True, subplot_titles=("Historical Share Price", "Historical Revenue"), vertical_spacing = .3)
    stock_data_specific = stock_data[stock_data.Date <= '2021--06-14']
    revenue_data_specific = revenue_data[revenue_data.Date <= '2021-04-30']
    fig.add_trace(go.Scatter(x=pd.to_datetime(stock_data_specific.Date), y=stock_data_specific.Close.astype("float"), name="Share Price"), row=1, col=1)
    fig.add_trace(go.Scatter(x=pd.to_datetime(revenue_data_specific.Date), y=revenue_data_specific.Revenue.astype("float"), name="Revenue"), row=2, col=1)
    fig.update_xaxes(title_text="Date", row=1, col=1)
    fig.update_xaxes(title_text="Date", row=2, col=1)
    fig.update_yaxes(title_text="Price ($US)", row=1, col=1)
    fig.update_yaxes(title_text="Revenue ($US Millions)", row=2, col=1)
    fig.update_layout(showlegend=False,
    height=900,
    title=stock,
    xaxis_rangeslider_visible=True)
    fig.show()

tesla = yf.Ticker("TSLA")
tesla_data = tesla.history(period="max")
tesla_data.reset_index(inplace=True)
tesla_data.head()

url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/revenue.htm"
html_data = requests.get(url).text

soup = BeautifulSoup(html_data, "html.parser")

tesla_revenue = pd.DataFrame(columns=['Date', 'Revenue'])

tables = soup.find_all('table')

for table in tables:
    if 'Tesla Quarterly Revenue' in str(table):
       
        for row in table.find_all('tr'):
            cols = row.find_all('td')
            if len(cols) >= 2:
                date = cols[0].text
                revenue = cols[1].text
                tesla_revenue = pd.concat([tesla_revenue, pd.DataFrame({"Date": [date], "Revenue": [revenue]})], ignore_index=True)

tesla_revenue["Revenue"] = tesla_revenue['Revenue'].str.replace('$', '')
tesla_revenue["Revenue"] = tesla_revenue['Revenue'].str.replace(',', '')

tesla_revenue["Revenue"] = tesla_revenue['Revenue'].str.replace(',|\$',"", regex=True)
tesla_revenue.dropna(inplace=True)

tesla_revenue = tesla_revenue[tesla_revenue['Revenue'] != ""]

tesla_revenue.tail(5)

def ticker(stock):
   
    if stock == "GameStop":
        return tesla_data['Close'].iloc[-1]
    else:
        return "Ticker symbol not found."

print(ticker("GameStop"))
gme = yf.Ticker("GME") 
gme_data = gme.history(period="max") 
gme_data.reset_index(inplace=True)
gme_data.head()

import requests

url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/stock.html"
response = requests.get(url)
html_data_2 = response.text
from bs4 import BeautifulSoup


soup = BeautifulSoup(html_data, 'html5lib')  

import pandas as pd

table = soup.find('table')


data = []
for row in table.find_all('tr'):
    cols = row.find_all('td')
    cols = [ele.text.strip() for ele in cols]
    data.append([ele for ele in cols if ele]) 

gme_revenue = pd.DataFrame(data[1:], columns=['Date', 'Revenue'])


gme_revenue['Revenue'] = gme_revenue['Revenue'].str.replace(',', '')
gme_revenue['Revenue'] = gme_revenue['Revenue'].str.replace('$', '')

print(gme_revenue)


print(gme_revenue.tail())

def make_graph(stock_data, title):

  import plotly.graph_objects as go
  fig = go.Figure([go.Scatter(x=stock_data['Date'], y=stock_data['Close'])])
  fig.update_layout(title=title, xaxis_title="Date", yaxis_title="Close Price (USD)")
  fig.show()

tesla_data_filtered = tesla_data[tesla_data['Date'] <= '2021-06-30']


make_graph(tesla_data_filtered, "Tesla Stock Price (Up to June 2021)")

def make_graph(stock_data, revenue_data, title):

    fig = go.Figure(data=[go.Scatter(x=pd.to_datetime(stock_data.Date), y=stock_data.Close.astype("float64"))])
    fig.update_layout(title=title, xaxis_title="Date", yaxis_title="Close Price",)
    fig.show()


make_graph(gme_data[gme_data.Date <= '2021-06-14'], gme_revenue, 'GameStop Stock Data')
